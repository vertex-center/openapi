openapi: 3.0.1
info:
    title: Vertex Containers
    description: Create and manage containers.
    version: ""
paths:
    /api/about:
        get:
            summary: Get server info
            operationId: getAbout
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CommonAbout'
    /api/containers:
        get:
            tags:
                - Containers
            summary: Get containers
            operationId: getContainers
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/TypesContainer'
        post:
            tags:
                - Containers
            summary: Create a container
            operationId: createContainer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateContainerInput'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TypesContainer'
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to create container
    /api/containers/{container_id}:
        get:
            tags:
                - Containers
            summary: Get a container
            operationId: getContainer
            parameters:
                - name: container_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TypesContainer'
                "404":
                    description: Container not found
                    content:
                        application/json:
                            schema: null
                            example:
                                error: container not found
        delete:
            tags:
                - Containers
            summary: Delete a container
            operationId: deleteContainer
            parameters:
                - name: container_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
            responses:
                "200":
                    description: OK
                "404":
                    description: Container not found
                    content:
                        application/json:
                            schema: null
                            example:
                                error: container not found
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: container still running
        patch:
            tags:
                - Containers
            summary: Patch a container
            operationId: patchContainer
            parameters:
                - name: container_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PatchContainerInput'
            responses:
                "200":
                    description: OK
                "404":
                    description: Container not found
                    content:
                        application/json:
                            schema: null
                            example:
                                error: container not found
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to patch container
    /api/containers/{container_id}/docker:
        get:
            tags:
                - Containers
            summary: Get Docker container info
            operationId: getDockerContainer
            parameters:
                - name: container_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                additionalProperties: {}
                "404":
                    description: Container not found
                    content:
                        application/json:
                            schema: null
                            example:
                                error: container not found
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to get Docker container info
    /api/containers/{container_id}/docker/recreate:
        post:
            tags:
                - Containers
            summary: Recreate Docker container
            operationId: recreateDockerContainer
            parameters:
                - name: container_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
            responses:
                "204":
                    description: No Content
                "404":
                    description: Container not found
                    content:
                        application/json:
                            schema: null
                            example:
                                error: container not found
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to recreate Docker container
    /api/containers/{container_id}/events:
        get:
            tags:
                - Containers
            summary: Get container events
            description: Get events for a container, sent as Server-Sent Events (SSE).
            operationId: eventsContainer
            parameters:
                - name: container_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
            responses:
                "200":
                    description: OK
                "404":
                    description: Container not found
                    content:
                        application/json:
                            schema: null
                            example:
                                error: container not found
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to get container events
    /api/containers/{container_id}/logs:
        get:
            tags:
                - Containers
            summary: Get container logs
            description: Get latest container logs.
            operationId: getContainerLogs
            parameters:
                - name: container_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/TypesLogLine'
                "404":
                    description: Container not found
                    content:
                        application/json:
                            schema: null
                            example:
                                error: container not found
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to get container logs
    /api/containers/{container_id}/reload:
        post:
            tags:
                - Containers
            summary: Reload a container
            operationId: reloadContainer
            parameters:
                - name: container_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
            responses:
                "204":
                    description: No Content
    /api/containers/{container_id}/start:
        post:
            tags:
                - Containers
            summary: Start a container
            operationId: startContainer
            parameters:
                - name: container_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
            responses:
                "200":
                    description: OK
                "404":
                    description: Container not found
                    content:
                        application/json:
                            schema: null
                            example:
                                error: container not found
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to start container
    /api/containers/{container_id}/stop:
        post:
            tags:
                - Containers
            summary: Stop a container
            operationId: stopContainer
            parameters:
                - name: container_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
            responses:
                "200":
                    description: OK
                "404":
                    description: Container not found
                    content:
                        application/json:
                            schema: null
                            example:
                                error: container not found
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to stop container
    /api/containers/{container_id}/tags/{tag_id}:
        put:
            tags:
                - Containers
            summary: Link tag to container
            operationId: addContainerTag
            parameters:
                - name: container_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
                - name: tag_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
            responses:
                "200":
                    description: OK
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to link tag to container
    /api/containers/{container_id}/versions:
        get:
            tags:
                - Containers
            summary: Get container image versions
            description: Get the possible versions of the container image that can be used.
            operationId: getContainerVersions
            parameters:
                - name: container_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
                - name: cache
                  in: query
                  allowEmptyValue: true
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                "404":
                    description: Container not found
                    content:
                        application/json:
                            schema: null
                            example:
                                error: container not found
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to get container image versions
    /api/containers/{container_id}/wait:
        get:
            tags:
                - Containers
            summary: Wait for a status change
            description: Wait for a status change of the container.
            operationId: waitContainerStatus
            parameters:
                - name: container_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
            responses:
                "204":
                    description: No Content
                "404":
                    description: Container not found
                    content:
                        application/json:
                            schema: null
                            example:
                                error: container not found
                "408":
                    description: Timeout
                    content:
                        application/json:
                            schema: null
                            example:
                                error: wait status timeout
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to wait for status change
    /api/containers/checkupdates:
        get:
            tags:
                - Containers
            summary: Check for updates
            operationId: checkForUpdates
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/TypesContainer'
    /api/containers/events:
        get:
            tags:
                - Containers
            summary: Get events
            operationId: events
            responses:
                "200":
                    description: OK
    /api/environments:
        get:
            tags:
                - Environment variables
            summary: Get an environment variables
            operationId: getEnvironment
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/TypesEnvVariable'
                "404":
                    description: Container not found
                    content:
                        application/json:
                            schema: null
                            example:
                                error: container not found
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to get container environment
        post:
            tags:
                - Environment variables
            summary: Create an environment variable
            operationId: createEnvironment
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateEnvironmentInput'
            responses:
                "201":
                    description: Created
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to create container environment
    /api/environments/{env_id}:
        delete:
            tags:
                - Environment variables
            summary: Delete an environment variable
            operationId: deleteEnvironment
            parameters:
                - name: env_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
            responses:
                "200":
                    description: OK
                "404":
                    description: Environment variable not found
                    content:
                        application/json:
                            schema: null
                            example:
                                error: environment variable not found
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to delete container environment
        patch:
            tags:
                - Environment variables
            summary: Patch an environment variable
            operationId: patchEnvironment
            parameters:
                - name: env_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PatchEnvironmentInput'
            responses:
                "200":
                    description: OK
                "404":
                    description: Environment variable not found
                    content:
                        application/json:
                            schema: null
                            example:
                                error: environment variable not found
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to patch container environment
    /api/metrics:
        get:
            tags:
                - Metrics
            summary: Get metrics
            description: Retrieve metrics for Prometheus.
            operationId: getMetrics
            responses:
                "200":
                    description: OK
    /api/ping:
        get:
            summary: Ping the app
            operationId: ping
            responses:
                "204":
                    description: No Content
    /api/ports:
        get:
            tags:
                - Ports
            summary: Get ports
            operationId: getPorts
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/TypesPort'
                "404":
                    description: Container not found
                    content:
                        application/json:
                            schema: null
                            example:
                                error: container not found
        post:
            tags:
                - Ports
            summary: Create port
            operationId: createPort
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreatePortInput'
            responses:
                "201":
                    description: Created
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to create port
    /api/ports/{port_id}:
        delete:
            tags:
                - Ports
            summary: Delete port
            operationId: deletePort
            parameters:
                - name: port_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
            responses:
                "200":
                    description: OK
                "404":
                    description: Port not found
                    content:
                        application/json:
                            schema: null
                            example:
                                error: container not found
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to delete port
        patch:
            tags:
                - Ports
            summary: Patch ports
            operationId: patchPort
            parameters:
                - name: port_id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PatchPortInput'
            responses:
                "200":
                    description: OK
                "404":
                    description: Port not found
                    content:
                        application/json:
                            schema: null
                            example:
                                error: port not found
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema: null
                            example:
                                error: failed to patch port
    /api/tags:
        get:
            tags:
                - Tags
            summary: Get tags
            operationId: getTags
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/TypesTag'
        post:
            tags:
                - Tags
            summary: Create tag
            operationId: createTag
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateTagInput'
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TypesTag'
    /api/tags/{id}:
        delete:
            tags:
                - Tags
            summary: Delete tag
            operationId: deleteTag
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
            responses:
                "200":
                    description: OK
    /api/tags/{name}:
        get:
            tags:
                - Tags
            summary: Get tag
            operationId: getTag
            parameters:
                - name: name
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TypesTag'
    /api/templates:
        get:
            tags:
                - Templates
            summary: Get templates
            operationId: getTemplates
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/TypesTemplate'
    /api/templates/{template_id}:
        get:
            tags:
                - Templates
            summary: Get template
            operationId: getTemplate
            parameters:
                - name: template_id
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TypesTemplate'
components:
    schemas:
        CommonAbout:
            type: object
            properties:
                arch:
                    type: string
                    example: amd64
                commit:
                    type: string
                    example: cd4ba2876f45775287f426c13adb1868f7c96222
                date:
                    type: string
                    example: 2006-01-02T15:04:05Z07:00
                os:
                    type: string
                    example: linux
                version:
                    type: string
                    example: 1.2.3
        CreateContainerInput:
            type: object
            properties:
                image:
                    type: string
                    nullable: true
                image_tag:
                    type: string
                    nullable: true
                template_id:
                    type: string
                    nullable: true
        CreateEnvironmentInput:
            type: object
            properties:
                container_id:
                    type: string
                    format: uuid
                name:
                    type: string
                type:
                    type: string
                value:
                    type: string
        CreatePortInput:
            type: object
            properties:
                container_id:
                    type: string
                    format: uuid
                in:
                    type: string
                out:
                    type: string
        CreateTagInput:
            type: object
            properties:
                name:
                    type: string
        PatchContainerInput:
            type: object
            properties:
                image_tag:
                    type: string
                    nullable: true
                launch_on_startup:
                    type: boolean
                    nullable: true
                name:
                    type: string
                    nullable: true
        PatchEnvironmentInput:
            type: object
            properties:
                container_id:
                    type: string
                    format: uuid
                default:
                    type: string
                    example: "5432"
                    nullable: true
                description:
                    type: string
                    example: The server database port
                    nullable: true
                display_name:
                    type: string
                    example: Database Port
                id:
                    type: string
                    format: uuid
                name:
                    type: string
                    example: DB_PORT
                secret:
                    type: boolean
                    example: true
                type:
                    type: string
                    enum:
                        - port
                value:
                    type: string
                    example: "5400"
        PatchPortInput:
            type: object
            properties:
                in:
                    type: string
                out:
                    type: string
        TypesContainer:
            type: object
            properties:
                color:
                    type: string
                    example: '#336699'
                    nullable: true
                command:
                    type: string
                    example: tunnel run
                    nullable: true
                databases:
                    type: object
                    additionalProperties:
                        type: array
                        items:
                            type: integer
                            format: int32
                        maxItems: 16
                        minItems: 16
                description:
                    type: string
                    example: An SQL database.
                    nullable: true
                icon:
                    type: string
                    example: simpleicons/postgres.svg
                    nullable: true
                id:
                    type: string
                    format: uuid
                image:
                    type: string
                    example: postgres
                image_tag:
                    type: string
                    example: latest
                launch_on_startup:
                    type: boolean
                    example: true
                name:
                    type: string
                    example: Postgres
                status:
                    type: string
                    example: running
                template_id:
                    type: string
                    example: postgres
                    nullable: true
                update:
                    $ref: '#/components/schemas/TypesContainerUpdate'
                user_id:
                    type: string
                    format: uuid
        TypesContainerUpdate:
            type: object
            properties:
                current_version:
                    type: string
                latest_version:
                    type: string
        TypesDatabaseEnvironment:
            type: object
            properties:
                display_name:
                    type: string
                names:
                    $ref: '#/components/schemas/TypesDatabaseEnvironmentNames'
                types:
                    type: array
                    items:
                        type: string
        TypesDatabaseEnvironmentNames:
            type: object
            properties:
                database:
                    type: string
                host:
                    type: string
                password:
                    type: string
                port:
                    type: string
                username:
                    type: string
        TypesDatabaseFeature:
            type: object
            properties:
                category:
                    type: string
                    example: sql
                database_default:
                    type: string
                    example: postgres
                    nullable: true
                password:
                    type: string
                    example: postgres
                    nullable: true
                port:
                    type: string
                    example: "5432"
                type:
                    type: string
                    example: postgres
                username:
                    type: string
                    example: postgres
                    nullable: true
        TypesEnvVariable:
            type: object
            properties:
                container_id:
                    type: string
                    format: uuid
                default:
                    type: string
                    example: "5432"
                    nullable: true
                description:
                    type: string
                    example: The server database port
                    nullable: true
                display_name:
                    type: string
                    example: Database Port
                id:
                    type: string
                    format: uuid
                name:
                    type: string
                    example: DB_PORT
                secret:
                    type: boolean
                    example: true
                type:
                    type: string
                    enum:
                        - port
                value:
                    type: string
                    example: "5400"
        TypesFeatures:
            type: object
            properties:
                databases:
                    type: array
                    items:
                        $ref: '#/components/schemas/TypesDatabaseFeature'
        TypesLogLine:
            type: object
            properties:
                id:
                    type: integer
                    format: int32
                kind:
                    type: string
        TypesPort:
            type: object
            properties:
                container_id:
                    type: string
                    format: uuid
                id:
                    type: string
                    format: uuid
                in:
                    type: string
                    example: "5432"
                out:
                    type: string
                    example: "5432"
        TypesTag:
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                name:
                    type: string
                    example: Vertex SQL
                user_id:
                    type: string
                    format: uuid
        TypesTemplate:
            type: object
            properties:
                color:
                    type: string
                    example: '#f38ba8'
                    nullable: true
                databases:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/TypesDatabaseEnvironment'
                description:
                    type: string
                    example: The authentication backend of Vertex.
                environment:
                    type: array
                    items:
                        $ref: '#/components/schemas/TypesTemplateEnv'
                features:
                    $ref: '#/components/schemas/TypesFeatures'
                icon:
                    type: string
                    example: vertex.svg
                    nullable: true
                id:
                    type: string
                    example: vertex-auth
                methods:
                    $ref: '#/components/schemas/TypesTemplateMethods'
                name:
                    type: string
                    example: Vertex Auth
                ports:
                    type: array
                    items:
                        $ref: '#/components/schemas/TypesTemplatePort'
                repository:
                    type: string
                    example: https://github.com/vertex-center/vertex
                    nullable: true
                urls:
                    type: array
                    items:
                        $ref: '#/components/schemas/TypesURL'
                version:
                    type: integer
                    format: int32
                    example: 3
        TypesTemplateClone:
            type: object
            properties:
                repository:
                    type: string
                    example: https://github.com/vertex-center/vertex
        TypesTemplateEnv:
            type: object
            properties:
                default:
                    type: string
                    example: "8080"
                description:
                    type: string
                    example: The port where the server will listen.
                display_name:
                    type: string
                    example: Server Port
                name:
                    type: string
                    example: PORT
                secret:
                    type: boolean
                    example: false
                    nullable: true
                type:
                    type: string
                    example: port
        TypesTemplateMethodDocker:
            type: object
            properties:
                capabilities:
                    type: array
                    items:
                        type: string
                clone:
                    $ref: '#/components/schemas/TypesTemplateClone'
                command:
                    type: string
                    nullable: true
                dockerfile:
                    type: string
                    example: Dockerfile
                    nullable: true
                image:
                    type: string
                    example: ghcr.io/vertex-center/vertex
                    nullable: true
                ports:
                    type: object
                    additionalProperties:
                        type: string
                sysctls:
                    type: object
                    additionalProperties:
                        type: string
                volumes:
                    type: object
                    additionalProperties:
                        type: string
        TypesTemplateMethods:
            type: object
            properties:
                docker:
                    $ref: '#/components/schemas/TypesTemplateMethodDocker'
        TypesTemplatePort:
            type: object
            properties:
                name:
                    type: string
                    example: Server Port
                port:
                    type: string
                    example: "3000"
        TypesURL:
            type: object
            properties:
                home:
                    type: string
                    example: /home
                    nullable: true
                kind:
                    type: string
                    enum:
                        - client
                        - server
                name:
                    type: string
                    example: Vertex Client
                ping:
                    type: string
                    example: /ping
                    nullable: true
                port:
                    type: string
                    example: "3000"
tags:
    - name: Containers
    - name: Environment variables
    - name: Metrics
    - name: Ports
    - name: Tags
    - name: Templates
